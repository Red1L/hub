{"version":3,"sources":["modules/services/github-service.ts"],"names":[],"mappings":"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","file":"modules/services/github-service.js","sourcesContent":["import module = require('./module');\r\nimport angular = require(\"{angular}/angular\");\r\nimport IRequestConfig = angular.IRequestConfig;\r\nimport IQResolveReject = angular.IQResolveReject; //\r\n\r\nconst GITHUB_API = 'https://api.github.com/';\r\nconst GITHUB_API_VERSION = 'application/vnd.github.v3+json';\r\nconst GITHUB_TOKEN = \"\";\r\n\r\ninterface SourceService {\r\n    searchUserRepositories(user:string): ng.IPromise<any>;\r\n}\r\n\r\nenum GithubSort {\r\n    STARS = <any> 'stars',\r\n    FORKS = <any> 'forks',\r\n    UPDATED = <any> 'updated'\r\n}\r\n\r\nenum GithubOrder {\r\n    ASC = <any> 'asc',\r\n    DESC = <any> 'desc'\r\n}\r\n\r\nexport class GithubService implements SourceService {\r\n    static $inject = ['$q', '$httpParamSerializer'];\r\n    constructor(private $q:ng.IQService, private $httpParamSerializer) {}\r\n\r\n    // todo need to authenticate to fix rate limit\r\n    public searchUserRepositories(user:string, per_page?:number, sort?:GithubSort, order?:GithubOrder):ng.IPromise<any> {\r\n        return this.$q((resolve, reject) => {\r\n            if (user) {\r\n                var url: string = GITHUB_API + 'users/'+ user +'/repos?' + this.$httpParamSerializer({sort: sort, order: order, per_page: per_page || 50 });\r\n                var xhr: XMLHttpRequest = this.createCORSRequest('GET', url);\r\n                if (!xhr) {\r\n                    console.info('CORS not supported');\r\n                    resolve();\r\n                }\r\n                xhr.onload = function () {\r\n                    resolve(JSON.parse(xhr.responseText));\r\n                };\r\n                xhr.onerror = function (error) {\r\n                    reject(error);\r\n                };\r\n                xhr.send();\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    private createCORSRequest = (method, url):XMLHttpRequest => {\r\n        var xhr = new XMLHttpRequest();\r\n        if (\"withCredentials\" in xhr) {\r\n            xhr.open(method, url, true);\r\n        } else if (typeof window['XDomainRequest'] != \"undefined\") {\r\n            xhr = new window['XDomainRequest']();\r\n            xhr.open(method, url);\r\n        } else {\r\n            xhr = null;\r\n        }\r\n        return xhr;\r\n    };\r\n}\r\n\r\nangular\r\n    .module(module.angularModules)\r\n    .service('GithubService', GithubService);"],"sourceRoot":"/source/"}