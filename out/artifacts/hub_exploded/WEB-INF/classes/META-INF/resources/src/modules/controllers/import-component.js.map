{"version":3,"sources":["modules/controllers/import-component.ts"],"names":[],"mappings":"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","file":"modules/controllers/import-component.js","sourcesContent":["import module = require('./module');\r\nimport angular = require('{angular}/angular');\r\nimport _ = require('{lodash}/lodash');\r\nimport IResource = angular.resource.IResource;\r\nimport {GithubService} from \"../services/github-service\";\r\nimport ILocationService = angular.ILocationService;\r\n\r\nenum RepositoryType {\r\n    GIT = <any> 'GIT',\r\n    SVN = <any> 'SVN'\r\n}\r\n\r\ninterface IRepository {\r\n    sourceType: RepositoryType;\r\n    sourceUrl: string;\r\n}\r\n\r\nclass ImportComponentController {\r\n\r\n    public static promiseRejected(reason):void {\r\n        throw new Error(reason.statusText || reason.data || reason);\r\n    }\r\n}\r\n\r\nclass QuickImportController {\r\n    public repositoryTypes:RepositoryType[] = [RepositoryType.GIT, RepositoryType.SVN];\r\n    public repository:IRepository = <any>{};\r\n    public importing:boolean = false;\r\n    public failure:boolean = false;\r\n    public success:boolean = false;\r\n    public newComponent:Card;\r\n\r\n    static $inject = ['HomeService', '$httpParamSerializer', '$location'];\r\n\r\n    constructor(private api, private $httpParamSerializer, private $location:ILocationService) {\r\n        this.repository.sourceType = this.repositoryTypes[0];\r\n        this.repository.sourceUrl = '';\r\n    };\r\n\r\n    public confirm(repository:IRepository):void {\r\n        this.importing = true;\r\n        var action = {\r\n            save: {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n                }\r\n            }\r\n        };\r\n        var formParam = this.$httpParamSerializer({\r\n            'sourceUrl': repository.sourceUrl,\r\n            'sourceType': repository.sourceType\r\n        });\r\n        this.api('home').enter('components', {}, action).save({}, formParam)\r\n            .$promise\r\n            .then(newComponent => {\r\n                if (newComponent) {\r\n                    this.success = true;\r\n                    this.newComponent = newComponent;\r\n                }\r\n            })\r\n            .catch(reason => {\r\n                this.failure = true;\r\n                ImportComponentController.promiseRejected(reason);\r\n            });\r\n    };\r\n\r\n    public terminate():void {\r\n        this.importing = false;\r\n        this.success = false;\r\n        this.failure = false;\r\n    }\r\n\r\n    public view(card:Card):void {\r\n        this.$location.path('hub/component/' + card.id);\r\n    }\r\n}\r\n\r\nclass GithubImportController {\r\n    public githubSearchQuery:string;\r\n    public searchedGithubComponents:Card[];\r\n    public selectedRepositories:any[];\r\n    public importing:boolean;\r\n    private SEARCH_LIMIT = 100;\r\n\r\n    static $inject = [\r\n        'HomeService',\r\n        '$location',\r\n        '$window',\r\n        '$mdToast',\r\n        'GithubService',\r\n        '$httpParamSerializer'\r\n    ];\r\n\r\n    constructor(private api:any,\r\n                private $location:ng.ILocationService,\r\n                private $window:ng.IWindowService,\r\n                private $mdToast,\r\n                private githubService:GithubService,\r\n                private $httpParamSerializer) {\r\n        this.githubSearchQuery = '';\r\n        this.searchedGithubComponents = [];\r\n        this.selectedRepositories = [];\r\n        this.importing = false;\r\n    }\r\n\r\n    private toast(message:string) {\r\n        this.$mdToast.show(\r\n            this.$mdToast.simple()\r\n                .textContent(message)\r\n                .position('top right')\r\n                .hideDelay(3000)\r\n        );\r\n    }\r\n\r\n    public searchGithubRepositories(query:string):void {\r\n        this.githubService.searchUserRepositories(query, this.SEARCH_LIMIT)\r\n            .then((results) => {\r\n                this.searchedGithubComponents = results.map((result) => {\r\n                    return { avatar: result.owner['avatar_url'], full_name: result.full_name};\r\n                });\r\n            })\r\n            .catch(ImportComponentController.promiseRejected);\r\n    }\r\n\r\n    public importComponents(selectedComponents):void {\r\n        if (!selectedComponents.length) {\r\n            this.toast('You did not select any repositories!');\r\n            return;\r\n        }\r\n        this.importing = true;\r\n        selectedComponents = GithubImportController.formatGithubRepositories(selectedComponents);\r\n        this.api('home').enter('import_list').save({}, selectedComponents).$promise\r\n            .then(result => {\r\n                this.importing = false;\r\n                this.searchedGithubComponents = [];\r\n                this.selectedRepositories = [];\r\n                this.githubSearchQuery = '';\r\n                this.toast('All components have been successfully imported!');\r\n            })\r\n            .catch((reason:any) => {\r\n                this.importing = false;\r\n                this.toast('Oh no ! An error occurred ! We could not import your component');\r\n                ImportComponentController.promiseRejected(reason);\r\n            });\r\n    }\r\n\r\n    public view(card:Card) {\r\n        this.$location.path('hub/component/' + card.id);\r\n    }\r\n\r\n    private static formatGithubRepositories(results) {\r\n        return results.map((c:any) => {\r\n            return { url: c.full_name, sourceType: 'GITHUB' };\r\n        });\r\n    }\r\n}\r\n\r\nclass VcsUrlValidator implements ng.IDirective {\r\n    require:string = 'ngModel';\r\n    scope:any = {repository: '='};\r\n    link:ng.IDirectiveLinkFn = (scope:ng.IScope, element:ng.IAugmentedJQuery, attributes:ng.IAttributes, ngModel:ng.INgModelController) => {\r\n        ngModel.$validators['isRepoUrl'] = (modelValue, viewValue) => {\r\n            switch (scope['repository'].sourceType) {\r\n                case RepositoryType.GIT:\r\n                    return /(?:git|ssh|https?|git@[\\w\\.]+):(?:\\/\\/)?[\\w\\.@:\\/~_-]+\\.git(?:\\/?|\\#[\\d\\w\\.\\-_]+?)$/.test(viewValue);\r\n                default:\r\n                    return true;\r\n            }\r\n        };\r\n        scope.$watch('repository', () => {\r\n            ngModel.$validate();\r\n        }, true);\r\n    };\r\n}\r\n\r\nangular\r\n    .module(module.angularModules)\r\n    .controller('ImportComponentController', ImportComponentController)\r\n    .controller('QuickImportController', QuickImportController)\r\n    .controller('GithubImportController', GithubImportController);"],"sourceRoot":"/source/"}