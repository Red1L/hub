{"version":3,"sources":["modules/controllers/administration.ts"],"names":[],"mappings":"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","file":"modules/controllers/administration.js","sourcesContent":["import module = require('./module');\r\nimport angular = require('{angular}/angular');\r\nimport _ = require('{lodash}/lodash');\r\nimport IResource = angular.resource.IResource;\r\nimport {GithubService} from \"../services/github-service\";\r\n\r\n\r\nclass AdminController {\r\n    public pendingComponents: Card[];\r\n    public githubSearchQuery: string;\r\n    public searchedGithubComponents: Card[];\r\n    public selectedRepositories: any[];\r\n    public importing: boolean;\r\n    private SEARCH_LIMIT = 100;\r\n\r\n    static $inject = [\r\n        'HomeService',\r\n        '$location',\r\n        '$window',\r\n        '$mdToast',\r\n        'GithubService',\r\n        '$httpParamSerializer'\r\n    ];\r\n    constructor(\r\n        private api: any,\r\n        private $location: ng.ILocationService,\r\n        private $window: ng.IWindowService,\r\n        private $mdToast,\r\n        private githubService: GithubService,\r\n        private $httpParamSerializer\r\n    ) {\r\n        this.pendingComponents = [];\r\n        this.githubSearchQuery = '';\r\n        this.searchedGithubComponents = [];\r\n        this.selectedRepositories = [];\r\n        this.importing = false;\r\n\r\n        this.getPendingComponents ()\r\n            .$promise\r\n            .then((components: any) => { this.pendingComponents = components.$embedded('components'); })\r\n            .catch(AdminController.promiseRejected);\r\n    }\r\n\r\n    public getPendingComponents (): IResource {\r\n        return this.api('home').enter('pending').get();\r\n    }\r\n\r\n    public publishComponent (component: any): void {\r\n        component.$links('state', {}, { publish: { method: 'PUT' }})\r\n            .publish('PUBLISHED')\r\n            .$promise\r\n            .then(() => {\r\n                _.remove(this.pendingComponents, c => c.id === component.id);\r\n                this.toast(component.name + ' has been published!');\r\n            })\r\n            .catch(AdminController.promiseRejected);\r\n    }\r\n\r\n    private toast (message: string) {\r\n        this.$mdToast.show(\r\n            this.$mdToast.simple()\r\n                .textContent(message)\r\n                .position('top right')\r\n                .hideDelay(3000)\r\n        );\r\n    }\r\n\r\n    public searchGithubRepositories (query: string): void {\r\n        this.githubService.searchUserRepositories(query, this.SEARCH_LIMIT)\r\n            .then((results) => { this.searchedGithubComponents = results; })\r\n            .catch(AdminController.promiseRejected);\r\n    }\r\n\r\n    public importComponents (selectedComponents): void {\r\n         this.importing = true;\r\n         selectedComponents = AdminController.formatGithubRepositories(selectedComponents);\r\n         this.api('home').enter('import_list').save({}, selectedComponents).$promise\r\n            .then(result => {\r\n                this.importing = false;\r\n                this.searchedGithubComponents = [];\r\n                this.selectedRepositories = [];\r\n                this.githubSearchQuery = '';\r\n                selectedComponents = [];\r\n                this.toast('All components have been successfully imported!');\r\n\r\n                this.getPendingComponents ()\r\n                    .$promise\r\n                    .then((components: any) => { this.pendingComponents = components.$embedded('components'); })\r\n                    .catch(AdminController.promiseRejected);\r\n            })\r\n            .catch((reason: any) => {\r\n                this.importing = false;\r\n                this.toast('Oh no ! An error occured ! We could not import your component');\r\n                throw new Error(reason.statusText || reason.data || reason);\r\n            });\r\n    }\r\n\r\n    public view (card: Card): void {\r\n        this.$location.path('hub/component/' + card.id);\r\n    }\r\n\r\n    private static formatGithubRepositories (results) {\r\n        return results.map((c: any) => {\r\n            return { url: c.full_name, vcsType: 'GITHUB' };\r\n        });\r\n    }\r\n\r\n    private static promiseRejected (reason): void {\r\n        throw new Error(reason.statusText || reason.data || reason);\r\n    }\r\n}\r\n\r\nangular\r\n    .module(module.angularModules)\r\n    .controller('AdminController', AdminController);"],"sourceRoot":"/source/"}